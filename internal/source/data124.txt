qbs *_SUB_IDEDRAWOBJ_STRING1_SEP=NULL;
if(_SUB_IDEDRAWOBJ_STRING1_SEP==NULL){
_SUB_IDEDRAWOBJ_STRING1_SEP=qbs_new_fixed((uint8*)mem_static_malloc(1),1,0);
memset(_SUB_IDEDRAWOBJ_STRING1_SEP->chr,0,1);
}
int32 *_SUB_IDEDRAWOBJ_LONG_X=NULL;
if(_SUB_IDEDRAWOBJ_LONG_X==NULL){
_SUB_IDEDRAWOBJ_LONG_X=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_X=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_Y=NULL;
if(_SUB_IDEDRAWOBJ_LONG_Y==NULL){
_SUB_IDEDRAWOBJ_LONG_Y=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_Y=0;
}
qbs *_SUB_IDEDRAWOBJ_STRING_A=NULL;
if (!_SUB_IDEDRAWOBJ_STRING_A)_SUB_IDEDRAWOBJ_STRING_A=qbs_new(0,0);
int32 *_SUB_IDEDRAWOBJ_LONG_X2=NULL;
if(_SUB_IDEDRAWOBJ_LONG_X2==NULL){
_SUB_IDEDRAWOBJ_LONG_X2=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_X2=0;
}
int32 pass4597;
int32 pass4598;
int32 pass4599;
byte_element_struct *byte_element_4600=NULL;
if (!byte_element_4600){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4600=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4600=(byte_element_struct*)mem_static_malloc(12);
}
byte_element_struct *byte_element_4601=NULL;
if (!byte_element_4601){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4601=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4601=(byte_element_struct*)mem_static_malloc(12);
}
int32 *_SUB_IDEDRAWOBJ_LONG_CX=NULL;
if(_SUB_IDEDRAWOBJ_LONG_CX==NULL){
_SUB_IDEDRAWOBJ_LONG_CX=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_CX=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_TX=NULL;
if(_SUB_IDEDRAWOBJ_LONG_TX==NULL){
_SUB_IDEDRAWOBJ_LONG_TX=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_TX=0;
}
byte_element_struct *byte_element_4602=NULL;
if (!byte_element_4602){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4602=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4602=(byte_element_struct*)mem_static_malloc(12);
}
int32 *_SUB_IDEDRAWOBJ_LONG_SX1=NULL;
if(_SUB_IDEDRAWOBJ_LONG_SX1==NULL){
_SUB_IDEDRAWOBJ_LONG_SX1=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_SX1=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_SX2=NULL;
if(_SUB_IDEDRAWOBJ_LONG_SX2==NULL){
_SUB_IDEDRAWOBJ_LONG_SX2=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_SX2=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_COLORCHAR=NULL;
if(_SUB_IDEDRAWOBJ_LONG_COLORCHAR==NULL){
_SUB_IDEDRAWOBJ_LONG_COLORCHAR=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_COLORCHAR=0;
}
int64 fornext_value4605;
int64 fornext_finalvalue4605;
int64 fornext_step4605;
uint8 fornext_step_negative4605;
byte_element_struct *byte_element_4606=NULL;
if (!byte_element_4606){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4606=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4606=(byte_element_struct*)mem_static_malloc(12);
}
int32 pass4608;
int32 pass4609;
int32 *_SUB_IDEDRAWOBJ_LONG_W=NULL;
if(_SUB_IDEDRAWOBJ_LONG_W==NULL){
_SUB_IDEDRAWOBJ_LONG_W=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_W=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_M=NULL;
if(_SUB_IDEDRAWOBJ_LONG_M==NULL){
_SUB_IDEDRAWOBJ_LONG_M=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_M=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_S=NULL;
if(_SUB_IDEDRAWOBJ_LONG_S==NULL){
_SUB_IDEDRAWOBJ_LONG_S=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_S=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_N=NULL;
if(_SUB_IDEDRAWOBJ_LONG_N==NULL){
_SUB_IDEDRAWOBJ_LONG_N=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_N=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_V1=NULL;
if(_SUB_IDEDRAWOBJ_LONG_V1==NULL){
_SUB_IDEDRAWOBJ_LONG_V1=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_V1=0;
}
qbs *_SUB_IDEDRAWOBJ_STRING_A3=NULL;
if (!_SUB_IDEDRAWOBJ_STRING_A3)_SUB_IDEDRAWOBJ_STRING_A3=qbs_new(0,0);
int32 *_SUB_IDEDRAWOBJ_LONG_I2=NULL;
if(_SUB_IDEDRAWOBJ_LONG_I2==NULL){
_SUB_IDEDRAWOBJ_LONG_I2=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_I2=0;
}
int64 fornext_value4611;
int64 fornext_finalvalue4611;
int64 fornext_step4611;
uint8 fornext_step_negative4611;
byte_element_struct *byte_element_4612=NULL;
if (!byte_element_4612){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4612=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4612=(byte_element_struct*)mem_static_malloc(12);
}
qbs *_SUB_IDEDRAWOBJ_STRING_A2=NULL;
if (!_SUB_IDEDRAWOBJ_STRING_A2)_SUB_IDEDRAWOBJ_STRING_A2=qbs_new(0,0);
byte_element_struct *byte_element_4613=NULL;
if (!byte_element_4613){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4613=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4613=(byte_element_struct*)mem_static_malloc(12);
}
int32 *_SUB_IDEDRAWOBJ_LONG_POSITION=NULL;
if(_SUB_IDEDRAWOBJ_LONG_POSITION==NULL){
_SUB_IDEDRAWOBJ_LONG_POSITION=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_POSITION=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_CHARACTER=NULL;
if(_SUB_IDEDRAWOBJ_LONG_CHARACTER==NULL){
_SUB_IDEDRAWOBJ_LONG_CHARACTER=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_CHARACTER=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_CF=NULL;
if(_SUB_IDEDRAWOBJ_LONG_CF==NULL){
_SUB_IDEDRAWOBJ_LONG_CF=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_CF=0;
}
int64 fornext_value4615;
int64 fornext_finalvalue4615;
int64 fornext_step4615;
uint8 fornext_step_negative4615;
byte_element_struct *byte_element_4616=NULL;
if (!byte_element_4616){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4616=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4616=(byte_element_struct*)mem_static_malloc(12);
}
byte_element_struct *byte_element_4618=NULL;
if (!byte_element_4618){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4618=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4618=(byte_element_struct*)mem_static_malloc(12);
}
int32 *_SUB_IDEDRAWOBJ_LONG_TNUM=NULL;
if(_SUB_IDEDRAWOBJ_LONG_TNUM==NULL){
_SUB_IDEDRAWOBJ_LONG_TNUM=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_TNUM=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_TSEL=NULL;
if(_SUB_IDEDRAWOBJ_LONG_TSEL==NULL){
_SUB_IDEDRAWOBJ_LONG_TSEL=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_TSEL=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_Q=NULL;
if(_SUB_IDEDRAWOBJ_LONG_Q==NULL){
_SUB_IDEDRAWOBJ_LONG_Q=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_Q=0;
}
int32 pass4622;
int32 pass4623;
int32 *_SUB_IDEDRAWOBJ_LONG_C=NULL;
if(_SUB_IDEDRAWOBJ_LONG_C==NULL){
_SUB_IDEDRAWOBJ_LONG_C=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_C=0;
}
int64 fornext_value4625;
int64 fornext_finalvalue4625;
int64 fornext_step4625;
uint8 fornext_step_negative4625;
byte_element_struct *byte_element_4626=NULL;
if (!byte_element_4626){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4626=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4626=(byte_element_struct*)mem_static_malloc(12);
}
int32 *_SUB_IDEDRAWOBJ_LONG_WHITESPACE=NULL;
if(_SUB_IDEDRAWOBJ_LONG_WHITESPACE==NULL){
_SUB_IDEDRAWOBJ_LONG_WHITESPACE=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_WHITESPACE=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_SPACING=NULL;
if(_SUB_IDEDRAWOBJ_LONG_SPACING==NULL){
_SUB_IDEDRAWOBJ_LONG_SPACING=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_SPACING=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_F2=NULL;
if(_SUB_IDEDRAWOBJ_LONG_F2==NULL){
_SUB_IDEDRAWOBJ_LONG_F2=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_F2=0;
}
int32 *_SUB_IDEDRAWOBJ_LONG_N2=NULL;
if(_SUB_IDEDRAWOBJ_LONG_N2==NULL){
_SUB_IDEDRAWOBJ_LONG_N2=(int32*)mem_static_malloc(4);
*_SUB_IDEDRAWOBJ_LONG_N2=0;
}
int64 fornext_value4628;
int64 fornext_finalvalue4628;
int64 fornext_step4628;
uint8 fornext_step_negative4628;
byte_element_struct *byte_element_4629=NULL;
if (!byte_element_4629){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4629=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4629=(byte_element_struct*)mem_static_malloc(12);
}
byte_element_struct *byte_element_4630=NULL;
if (!byte_element_4630){
if ((mem_static_pointer+=12)<mem_static_limit) byte_element_4630=(byte_element_struct*)(mem_static_pointer-12); else byte_element_4630=(byte_element_struct*)mem_static_malloc(12);
}
